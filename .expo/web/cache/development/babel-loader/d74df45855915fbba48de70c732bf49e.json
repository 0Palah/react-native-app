{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport \"react-native-gesture-handler\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Font from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport useRoute from \"./router\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    appIsReady = _useState2[0],\n    setAppIsReady = _useState2[1];\n  var routing = useRoute(true);\n  useEffect(function () {\n    function prepare() {\n      return _prepare.apply(this, arguments);\n    }\n    function _prepare() {\n      _prepare = _asyncToGenerator(function* () {\n        try {\n          yield Font.loadAsync({\n            \"Roboto-Regular\": require(\"./assets/fonts/Roboto/Roboto-Regular.ttf\"),\n            \"Roboto-Medium\": require(\"./assets/fonts/Roboto/Roboto-Medium.ttf\")\n          });\n        } catch (e) {\n          console.warn(e);\n        } finally {\n          setAppIsReady(true);\n        }\n      });\n      return _prepare.apply(this, arguments);\n    }\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (appIsReady) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [appIsReady]);\n  if (!appIsReady) {\n    return null;\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    onLayout: onLayoutRootView,\n    children: [_jsx(StatusBar, {\n      style: \"auto\"\n    }), _jsx(NavigationContainer, {\n      children: routing\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\"\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","useCallback","StatusBar","Font","SplashScreen","NavigationContainer","useRoute","App","appIsReady","setAppIsReady","routing","prepare","loadAsync","require","e","console","warn","onLayoutRootView","hideAsync","styles","container","StyleSheet","create","flex","backgroundColor"],"sources":["F:/it/react-native-app/App.js"],"sourcesContent":["import \"react-native-gesture-handler\";\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nimport { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, View } from \"react-native\";\nimport * as Font from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\n\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport useRoute from \"./router\";\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  const routing = useRoute(true);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        await Font.loadAsync({\n          \"Roboto-Regular\": require(\"./assets/fonts/Roboto/Roboto-Regular.ttf\"),\n          \"Roboto-Medium\": require(\"./assets/fonts/Roboto/Roboto-Medium.ttf\"),\n        });\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setAppIsReady(true);\n      }\n    }\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container} onLayout={onLayoutRootView}>\n      <StatusBar style=\"auto\" />\n      <NavigationContainer>{routing}</NavigationContainer>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n  },\n});\n"],"mappings":";;AAAA,OAAO,8BAA8B;AACrC,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAE/D,SAASC,SAAS,QAAQ,iBAAiB;AAAC;AAAA;AAE5C,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,OAAO,KAAKC,YAAY,MAAM,oBAAoB;AAElD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,QAAQ;AAAiB;AAAA;AAEhC,eAAe,SAASC,GAAG,GAAG;EAC5B,gBAAoCR,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA5CS,UAAU;IAAEC,aAAa;EAEhC,IAAMC,OAAO,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAE9BN,SAAS,CAAC,YAAM;IAAA,SACCW,OAAO;MAAA;IAAA;IAAA;MAAA,6BAAtB,aAAyB;QACvB,IAAI;UACF,MAAMR,IAAI,CAACS,SAAS,CAAC;YACnB,gBAAgB,EAAEC,OAAO,4CAA4C;YACrE,eAAe,EAAEA,OAAO;UAC1B,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOC,CAAC,EAAE;UACVC,OAAO,CAACC,IAAI,CAACF,CAAC,CAAC;QACjB,CAAC,SAAS;UACRL,aAAa,CAAC,IAAI,CAAC;QACrB;MACF,CAAC;MAAA;IAAA;IACDE,OAAO,EAAE;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMM,gBAAgB,GAAGhB,WAAW,mBAAC,aAAY;IAC/C,IAAIO,UAAU,EAAE;MACd,MAAMJ,YAAY,CAACc,SAAS,EAAE;IAChC;EACF,CAAC,GAAE,CAACV,UAAU,CAAC,CAAC;EAEhB,IAAI,CAACA,UAAU,EAAE;IACf,OAAO,IAAI;EACb;EAEA,OACE,MAAC,IAAI;IAAC,KAAK,EAAEW,MAAM,CAACC,SAAU;IAAC,QAAQ,EAAEH,gBAAiB;IAAA,WACxD,KAAC,SAAS;MAAC,KAAK,EAAC;IAAM,EAAG,EAC1B,KAAC,mBAAmB;MAAA,UAAEP;IAAO,EAAuB;EAAA,EAC/C;AAEX;AAEA,IAAMS,MAAM,GAAGE,UAAU,CAACC,MAAM,CAAC;EAC/BF,SAAS,EAAE;IACTG,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE;EACnB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}