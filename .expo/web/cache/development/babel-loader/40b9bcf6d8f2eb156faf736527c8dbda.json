{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport RegistrationScreen from \"./Screens/RegistrationScreen\";\nimport * as Font from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    appIsReady = _useState2[0],\n    setAppIsReady = _useState2[1];\n  useEffect(function () {\n    function prepare() {\n      return _prepare.apply(this, arguments);\n    }\n    function _prepare() {\n      _prepare = _asyncToGenerator(function* () {\n        try {\n          yield Font.loadAsync({\n            \"Roboto-Regular\": require(\"./assets/fonts/Roboto/Roboto-Regular.ttf\"),\n            \"Roboto-Medium\": require(\"./assets/fonts/Roboto/Roboto-Medium.ttf\")\n          });\n        } catch (e) {\n          console.warn(e);\n        } finally {\n          setAppIsReady(true);\n        }\n      });\n      return _prepare.apply(this, arguments);\n    }\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (appIsReady) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [appIsReady]);\n  if (!appIsReady) {\n    return null;\n  }\n  return _jsx(RegistrationScreen, {});\n}","map":{"version":3,"names":["React","useState","useEffect","useCallback","RegistrationScreen","Font","SplashScreen","App","appIsReady","setAppIsReady","prepare","loadAsync","require","e","console","warn","onLayoutRootView","hideAsync"],"sources":["F:/it/react-native-app/App.js"],"sourcesContent":["// import { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nimport RegistrationScreen from \"./Screens/RegistrationScreen\";\n\nimport * as Font from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  // const [platform, setPlatform] = useState(\"\");\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        await Font.loadAsync({\n          \"Roboto-Regular\": require(\"./assets/fonts/Roboto/Roboto-Regular.ttf\"),\n          \"Roboto-Medium\": require(\"./assets/fonts/Roboto/Roboto-Medium.ttf\"),\n        });\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setAppIsReady(true);\n      }\n    }\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return <RegistrationScreen></RegistrationScreen>;\n}\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAE/D,OAAOC,kBAAkB;AAEzB,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,OAAO,KAAKC,YAAY,MAAM,oBAAoB;AAAC;AAEnD,eAAe,SAASC,GAAG,GAAG;EAC5B,gBAAoCN,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA5CO,UAAU;IAAEC,aAAa;EAIhCP,SAAS,CAAC,YAAM;IAAA,SACCQ,OAAO;MAAA;IAAA;IAAA;MAAA,6BAAtB,aAAyB;QACvB,IAAI;UACF,MAAML,IAAI,CAACM,SAAS,CAAC;YACnB,gBAAgB,EAAEC,OAAO,4CAA4C;YACrE,eAAe,EAAEA,OAAO;UAC1B,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOC,CAAC,EAAE;UACVC,OAAO,CAACC,IAAI,CAACF,CAAC,CAAC;QACjB,CAAC,SAAS;UACRJ,aAAa,CAAC,IAAI,CAAC;QACrB;MACF,CAAC;MAAA;IAAA;IACDC,OAAO,EAAE;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMM,gBAAgB,GAAGb,WAAW,mBAAC,aAAY;IAC/C,IAAIK,UAAU,EAAE;MACd,MAAMF,YAAY,CAACW,SAAS,EAAE;IAChC;EACF,CAAC,GAAE,CAACT,UAAU,CAAC,CAAC;EAEhB,IAAI,CAACA,UAAU,EAAE;IACf,OAAO,IAAI;EACb;EAEA,OAAO,KAAC,kBAAkB,KAAsB;AAClD"},"metadata":{},"sourceType":"module"}